//7.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

//modified 2023.12.15
namespace Generated;

//ADDED by code generator
public interface I_TILT_Tag_Note_Table 
{
        long ID { get; set; }
                long IDTag { get; set; }
                long IDNote { get; set; }
            public string ToFullPropertyString();
		
}

public class TILT_Tag_Note_Table : I_TILT_Tag_Note_Table
{
    public string ToFullPropertyString(){
        string data="";
                data += "ID=" +this.ID;
            data += "IDNote=" +this.IDNote;
            data += "IDTag=" +this.IDTag;
            return data;
    }

    public static MetaTable metaData = new("TILT_Tag_Note");
    static TILT_Tag_Note_Table (){
        MetaColumn mc=null;
        mc=new ("ID","long",false);                
        mc.IsPk = false ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
        mc=new ("IDTag","long",false);                
        mc.IsPk = false ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
        mc=new ("IDNote","long",false);                
        mc.IsPk = false ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
 //done with foreach property in static constructor
    }
        public long ID { get; set; }
                public long IDTag { get; set; }
                public long IDNote { get; set; }
             public void CopyFrom(I_TILT_Tag_Note_Table other)  {
        this.ID = other.ID;
                this.IDTag = other.IDTag;
                this.IDNote = other.IDNote;
            }

    public static explicit operator TILT_Tag_Note_Table?(TILT_Tag_Note obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new TILT_Tag_Note_Table();
         ret.CopyFrom(obj as I_TILT_Tag_Note_Table );
         return ret;
     }
     public static explicit operator TILT_Tag_Note?(TILT_Tag_Note_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new TILT_Tag_Note();
         ret.CopyFrom(obj as I_TILT_Tag_Note_Table) ;
         return ret;
     }



}
public partial class TILT_Tag_Note : I_TILT_Tag_Note_Table
{

    public string ToFullPropertyString(){
        string data="";
                data += "ID=" +this.ID;
            data += "IDNote=" +this.IDNote;
            data += "IDTag=" +this.IDTag;
            return data;
    }

     public void CopyFrom(I_TILT_Tag_Note_Table other)  {
        this.ID = other.ID;
                this.IDTag = other.IDTag;
                this.IDNote = other.IDNote;
            }

}

//for TILT_Tag_Note 
public enum eTILT_Tag_NoteColumns {
    None = 0
        ,ID 
                ,IDTag 
                ,IDNote 
        }

//finish ADDED by code generator

[Keyless]

public partial class TILT_Tag_Note
{
    public long ID { get; set; }

    public long IDTag { get; set; }

    public long IDNote { get; set; }
}


