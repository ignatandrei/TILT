//5.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_ApplicationDBContext_TILT_NoteController : Controller
{
    private ISearchDataTILT_Note _search;
    public AdvancedSearch_ApplicationDBContext_TILT_NoteController(ISearchDataTILT_Note search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> GetAll()
    {
        await foreach(var item in _search.TILT_NoteFind_AsyncEnumerable(null))
        {
            yield return (TILT_Note_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<TILT_Note_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchTILT_Note();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eTILT_NoteColumns>[1];
        search.SearchFields[0]= new SearchField<eTILT_NoteColumns>();
        if(Enum.TryParse< eTILT_NoteColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eTILT_NoteColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(search))
        {
            yield return (TILT_Note_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> GetWithSearch(SearchTILT_Note s)
    {
        await foreach(var item in _search.TILT_NoteFind_AsyncEnumerable(s))
        {
            yield return (TILT_Note_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchTILT_Note? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }
        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_EqualValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_ID(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_DifferentValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_ID(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> ID_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  long value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_ID(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_EqualValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.ID,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_DifferentValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.ID,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_LessOrEqual(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_Less(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_GreaterOrEqual(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_Greater(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_Between( long  valStart, long valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ID_NotBetween( long  valStart, long valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_EqualValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_IDURL(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_DifferentValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_IDURL(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> IDURL_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  long value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_IDURL(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_EqualValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.IDURL,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_DifferentValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.IDURL,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_LessOrEqual(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.IDURL  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_Less(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.IDURL  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_GreaterOrEqual(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.IDURL  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_Greater(long  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.IDURL  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_Between( long  valStart, long valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.IDURL, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> IDURL_NotBetween( long  valStart, long valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.IDURL, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_Text(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_Text(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> Text_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_Text(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.Text,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.Text,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_Contains(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eTILT_NoteColumns.Text  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_EndsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eTILT_NoteColumns.Text  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_StartsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eTILT_NoteColumns.Text  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_LessOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.Text  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_Less(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.Text  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_GreaterOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.Text  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_Greater(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.Text  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_Between( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.Text, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Text_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.Text, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_Link(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_Link(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> Link_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_Link(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_Link(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_Link(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.Link,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.Link,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_Contains(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eTILT_NoteColumns.Link  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_EndsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eTILT_NoteColumns.Link  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_StartsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eTILT_NoteColumns.Link  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_LessOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.Link  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_Less(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.Link  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_GreaterOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.Link  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_Greater(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.Link  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_Between( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.Link, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> Link_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.Link, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_EqualValue( DateTime?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_ForDate(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_DifferentValue( DateTime?  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_ForDate(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> ForDate_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  DateTime? value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_ForDate(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_ForDate(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_ForDate(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_EqualValues( DateTime?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.ForDate,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_DifferentValues( DateTime?[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.ForDate,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_LessOrEqual(DateTime  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.ForDate  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_Less(DateTime  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.ForDate  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_GreaterOrEqual(DateTime  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.ForDate  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_Greater(DateTime  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.ForDate  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_Between( DateTime  valStart, DateTime valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.ForDate, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> ForDate_NotBetween( DateTime  valStart, DateTime valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.ForDate, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_NoteSimpleSearch_TimeZoneString(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_NoteSimpleSearch_TimeZoneString(sc, value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.TILT_NoteSimpleSearch_TimeZoneString(sc,value))
        {
            yield return (TILT_Note_Table)item!;
        }
    }

        [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_FindNull(){
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_TimeZoneString(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_FindNotNull(){
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach(var item in _search.TILT_NoteSimpleSearchNull_TimeZoneString(sc))
        {
            yield return (TILT_Note_Table)item!;
        }
    }
         
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_NoteColumns.TimeZoneString,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_NoteColumns.TimeZoneString,value);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_Note_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_Contains(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eTILT_NoteColumns.TimeZoneString  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_EndsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eTILT_NoteColumns.TimeZoneString  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_StartsWith(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eTILT_NoteColumns.TimeZoneString  , val);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_LessOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_NoteColumns.TimeZoneString  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_Less(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_NoteColumns.TimeZoneString  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_GreaterOrEqual(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_NoteColumns.TimeZoneString  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_Greater(string  val)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_NoteColumns.TimeZoneString  , val.ToString());
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_Between( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_NoteColumns.TimeZoneString, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_Note_Table> TimeZoneString_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchTILT_Note.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_NoteColumns.TimeZoneString, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_NoteFind_AsyncEnumerable(sc))
        {

            yield return (TILT_Note_Table)item!;
        }
    }    

            


    


}//end class

