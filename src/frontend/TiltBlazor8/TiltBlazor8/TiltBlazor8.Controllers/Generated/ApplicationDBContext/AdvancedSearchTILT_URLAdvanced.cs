//5.this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_ApplicationDBContext_TILT_URLController : Controller
{
    private ISearchDataTILT_URL _search;
    public AdvancedSearch_ApplicationDBContext_TILT_URLController(ISearchDataTILT_URL search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> GetAll()
    {
        await foreach(var item in _search.TILT_URLFind_AsyncEnumerable(null))
        {
            yield return (TILT_URL_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<TILT_URL_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchTILT_URL();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eTILT_URLColumns>[1];
        search.SearchFields[0]= new SearchField<eTILT_URLColumns>();
        if(Enum.TryParse< eTILT_URLColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eTILT_URLColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(search))
        {
            yield return (TILT_URL_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> GetWithSearch(SearchTILT_URL s)
    {
        await foreach(var item in _search.TILT_URLFind_AsyncEnumerable(s))
        {
            yield return (TILT_URL_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchTILT_URL? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }

//has one key
    [HttpGet]
    public async Task<TILT_URL_Table?> GetSingle(long id){
        var data=await _search.TILT_URLGetSingle(id);
       if(data == null)
        return null;
       return (TILT_URL_Table)data;
    }

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_EqualValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_URLSimpleSearch_ID(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_DifferentValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_URLSimpleSearch_ID(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_URL_Table> ID_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  long value){
        await foreach(var item in _search.TILT_URLSimpleSearch_ID(sc,value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_EqualValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_URLColumns.ID,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_DifferentValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_URLColumns.ID,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_LessOrEqual(long  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_URLColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_Less(long  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_URLColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_GreaterOrEqual(long  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_URLColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_Greater(long  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_URLColumns.ID  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_Between( long  valStart, long valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_URLColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> ID_NotBetween( long  valStart, long valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_URLColumns.ID, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_URLSimpleSearch_URLPart(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_URLSimpleSearch_URLPart(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_URL_Table> URLPart_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.TILT_URLSimpleSearch_URLPart(sc,value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_URLColumns.URLPart,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_URLColumns.URLPart,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_Contains(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eTILT_URLColumns.URLPart  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_EndsWith(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eTILT_URLColumns.URLPart  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_StartsWith(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eTILT_URLColumns.URLPart  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_LessOrEqual(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_URLColumns.URLPart  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_Less(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_URLColumns.URLPart  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_GreaterOrEqual(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_URLColumns.URLPart  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_Greater(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_URLColumns.URLPart  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_Between( string  valStart, string valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_URLColumns.URLPart, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> URLPart_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_URLColumns.URLPart, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.TILT_URLSimpleSearch_Secret(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.TILT_URLSimpleSearch_Secret(sc, value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<TILT_URL_Table> Secret_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.TILT_URLSimpleSearch_Secret(sc,value))
        {
            yield return (TILT_URL_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eTILT_URLColumns.Secret,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eTILT_URLColumns.Secret,value);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {
        
            yield return (TILT_URL_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_Contains(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eTILT_URLColumns.Secret  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_EndsWith(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eTILT_URLColumns.Secret  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_StartsWith(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eTILT_URLColumns.Secret  , val);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_LessOrEqual(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eTILT_URLColumns.Secret  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_Less(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Less, eTILT_URLColumns.Secret  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_GreaterOrEqual(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eTILT_URLColumns.Secret  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_Greater(string  val)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eTILT_URLColumns.Secret  , val.ToString());
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_Between( string  valStart, string valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.Between, eTILT_URLColumns.Secret, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<TILT_URL_Table> Secret_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchTILT_URL.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eTILT_URLColumns.Secret, valStart +","+ valEnd);
        await foreach (var item in _search.TILT_URLFind_AsyncEnumerable(sc))
        {

            yield return (TILT_URL_Table)item!;
        }
    }    

            


    


}//end class

