{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\shadow\\\\OneDrive\\\\Portofoliu\\\\TILT\\\\src\\\\frontend\\\\tilt-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst NAMESPACE = 'ionic';\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst setPlatformHelpers = helpers => {\n  Object.assign(plt, helpers);\n};\n\nconst supportsShadow = true;\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (listeners) {\n    listeners.map(([flags, name, method]) => {\n      const target = getHostListenerTarget(elm, flags);\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\n\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    {\n      if (hostRef.$flags$ & 256\n      /* isListenReady */\n      ) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\n\nconst getHostListenerTarget = (elm, flags) => {\n  if (flags & 4\n  /* TargetDocument */\n  ) return doc;\n  if (flags & 8\n  /* TargetWindow */\n  ) return win;\n  if (flags & 16\n  /* TargetBody */\n  ) return doc.body;\n  return elm;\n}; // prettier-ignore\n\n\nconst hostListenerOpts = flags => (flags & 2\n/* Capture */\n) !== 0;\n\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta, mode);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        if (styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n\n  if (flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n\n    if (flags & 2\n    /* scopedCssEncapsulation */\n    ) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + (mode && cmp.$flags$ & 32\n/* hasMode */\n? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n\nconst convertScopedToShadow = css => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{'); // Private\n\n\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m); // Public\n\n\nconst setMode = handler => modeResolutionChain.push(handler);\n\nconst getMode = ref => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    // normalize class / classname attributes\n    if (vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    if (vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  if (typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  {\n    vnode.$key$ = key;\n  }\n  {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  {\n    vnode.$key$ = null;\n  }\n  {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (memberName === 'style') {\n      // update style attribute, css properties and values\n      {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (memberName === 'key') ;else if (memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      let xlink = false;\n      {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n\n  if (!useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* isSlotReference */\n      ;\n    }\n  }\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (newVNode.$flags$ & 1\n  /* isSlotReference */\n  ) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = doc.createTextNode('');\n  } else {\n    if (!isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$);\n\n    if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* isSlotFallback */\n    | 1\n    /* isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\n\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1\n  /* isTmpDisconnected */\n  ;\n  const oldSlotChildNodes = parentElm.childNodes;\n\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* isTmpDisconnected */\n  ;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, referenceNode(before));\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n\n    {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n  }\n\n  return false;\n};\n\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n\n  if (text === null) {\n    {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    } // element node\n\n    {\n      if (tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (defaultHolder = elm['s-cr']) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n\n        childNode.hidden = false;\n\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            || nodeType === 3\n            /* TextNode */\n            && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      } // keep drilling down\n\n\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n\nconst relocateNodes = [];\n\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  let childNodes = elm.childNodes;\n  let ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\n\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1\n  /* ElementNode */\n  ) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nconst callNodeRefs = vNode => {\n  {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  }\n  {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = (cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n  {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1\n    /* isTmpDisconnected */\n    ;\n\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* ElementNode */\n          ) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // done moving nodes around\n    // allow the disconnect callback to work again\n\n\n    plt.$flags$ &= ~1\n    /* isTmpDisconnected */\n    ; // always reset\n\n    relocateNodes.length = 0;\n  }\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* Cancellable */\n        ),\n        detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n\n  if (isInitialLoad) {\n    {\n      hostRef.$flags$ |= 256\n      /* isListenReady */\n      ;\n\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  }\n\n  {\n    promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n  }\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (hostRef, instance, isInitialLoad) {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n\n    if (isInitialLoad) {\n      // DOM WRITE!\n      attachStyles(hostRef);\n    }\n\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n      callRender(hostRef, instance);\n    }\n\n    if (rc) {\n      // ok, so turns out there are some child host elements\n      // waiting on this parent element to load\n      // let's fire off all update callbacks waiting\n      rc.map(cb => cb());\n      elm['s-rc'] = undefined;\n    }\n\n    endRender();\n    endUpdate();\n    {\n      const childrenPromises = elm['s-p'];\n\n      const postUpdate = () => postUpdateComponent(hostRef);\n\n      if (childrenPromises.length === 0) {\n        postUpdate();\n      } else {\n        Promise.all(childrenPromises).then(postUpdate);\n        hostRef.$flags$ |= 4\n        /* isWaitingForChildren */\n        ;\n        childrenPromises.length = 0;\n      }\n    }\n  });\n\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render && instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = hostRef.$lazyInstance$;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  {\n    safeCall(instance, 'componentDidRender');\n  }\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    {\n      safeCall(instance, 'componentDidLoad');\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    {\n      safeCall(instance, 'componentDidUpdate');\n    }\n    endPostUpdate();\n  }\n\n  {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst forceUpdate = ref => {\n  {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n\n    if (isConnected && (hostRef.$flags$ & (2\n    /* hasRendered */\n    | 16\n    /* isQueuedForUpdate */\n    )) === 2\n    /* hasRendered */\n    ) {\n      scheduleUpdate(hostRef, false);\n    } // Returns \"true\" when the forced update was successfully scheduled\n\n\n    return isConnected;\n  }\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime('hydrateClient', tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const shadowRootNodes = shadowRoot ? [] : null;\n  const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(c => {\n    const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = c.$elm$;\n\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n\n  if (shadowRoot) {\n    shadowRootNodes.map(shadowRootNode => {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n\n  endHydrate();\n};\n\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i;\n\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID); // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        } // add our child vnode to a specific index of the vnode's children\n\n\n        parentVNode.$children$[childVNode.$index$] = childVNode; // this is now the new parent vnode for all the next child checks\n\n        parentVNode = childVNode;\n\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    } // recursively drill down, end to start so we can remove nodes\n\n\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3\n        /* TextNode */\n        ) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode); // remove the text comment since it's no longer needed\n\n          node.remove();\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifcally for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n\n          node['s-sr'] = true;\n\n          if (shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            } // insert the new slot element before the slot comment\n\n\n            node.parentNode.insertBefore(childVNode.$elm$, node); // remove the slot comment since it's not needed for shadow\n\n            node.remove();\n\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n\n          slotNodes.push(childVNode);\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\n\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n    let i = 0;\n\n    for (; i < node.childNodes.length; i++) {\n      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n    }\n\n    if (node.shadowRoot) {\n      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n    const childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = ''; // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\n\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n\n    if (propType & 2\n    /* Number */\n    ) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n\n    if (propType & 1\n    /* String */\n    ) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]); // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      } else if (flags & 1\n      /* isElementConstructor */\n      && memberFlags & 64\n      /* Method */\n      ) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value(...args) {\n            const ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n          }\n\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName); //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n      /* HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n\n        if (m[0] & 512\n        /* ReflectAttr */\n        ) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32\n    /* hasInitializedComponent */\n    ) === 0) {\n      {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32\n        /* hasInitializedComponent */\n        ; // lazy loaded components\n        // request the component's implementation to be\n        // wired up with the host element\n\n        Cstr = loadModule(cmpMeta);\n\n        if (Cstr.then) {\n          // Await creates a micro-task avoid if possible\n          const endLoad = uniqueTime();\n          Cstr = yield Cstr;\n          endLoad();\n        }\n\n        if (!Cstr.isProxied) {\n          // we've never proxied this Constructor before\n          // let's add the getters/setters to its prototype before\n          // the first time we create an instance of the implementation\n          {\n            cmpMeta.$watchers$ = Cstr.watchers;\n          }\n          proxyComponent(Cstr, cmpMeta, 2\n          /* proxyState */\n          );\n          Cstr.isProxied = true;\n        }\n\n        const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n        // but let's keep track of when we start and stop\n        // so that the getters/setters don't incorrectly step on data\n\n        {\n          hostRef.$flags$ |= 8\n          /* isConstructingInstance */\n          ;\n        } // construct the lazy-loaded component implementation\n        // passing the hostRef is very important during\n        // construction in order to directly wire together the\n        // host element and the lazy-loaded instance\n\n        try {\n          new Cstr(hostRef);\n        } catch (e) {\n          consoleError(e);\n        }\n\n        {\n          hostRef.$flags$ &= ~8\n          /* isConstructingInstance */\n          ;\n        }\n        {\n          hostRef.$flags$ |= 128\n          /* isWatchReady */\n          ;\n        }\n        endNewInstance();\n        fireConnectedCallback(hostRef.$lazyInstance$);\n      }\n\n      if (Cstr.style) {\n        // this component has styles but we haven't registered them yet\n        let style = Cstr.style;\n\n        if (typeof style !== 'string') {\n          style = style[hostRef.$modeName$ = computeMode(elm)];\n        }\n\n        const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n\n        if (!styles.has(scopeId)) {\n          const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ));\n          endRegisterStyles();\n        }\n      }\n    } // we've successfully created a lazy instance\n\n\n    const ancestorComponent = hostRef.$ancestorComponent$;\n\n    const schedule = () => scheduleUpdate(hostRef, true);\n\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n      // this is the initial load and this component it has an ancestor component\n      // but the ancestor component has NOT fired its will update lifecycle yet\n      // so let's just cool our jets and wait for the ancestor to continue first\n      // this will get fired off when the ancestor component\n      // finally gets around to rendering its lazy self\n      // fire off the initial update\n      ancestorComponent['s-rc'].push(schedule);\n    } else {\n      schedule();\n    }\n  });\n\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst fireConnectedCallback = instance => {\n  {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      let hostId;\n      {\n        hostId = elm.getAttribute(HYDRATE_ID);\n\n        if (hostId) {\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            const scopeId = addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'));\n            elm.classList.remove(scopeId + '-h', scopeId + '-s');\n          }\n\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n\n      if (!hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (cmpMeta.$flags$ & (4\n        /* hasSlotRelocation */\n        | 8\n        /* needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent.nodeType === 1\n          /* ElementNode */\n          && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$); // fire off connectedCallback() on component instance\n\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment('');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = hostRef.$lazyInstance$;\n    {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n  }\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  const styles = /*@__PURE__*/doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let appLoadFallback;\n  let isBootstrapping = true;\n  let i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2\n    /* appLoaded */\n    ;\n  }\n  {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      {\n        cmpMeta.$watchers$ = {};\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16\n                  /* shadowDelegatesFocus */\n                  )\n                });\n              }\n            }\n          }\n        }\n\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  });\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nconst Build = {\n  isDev: false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: false\n};\nexport { Build as B, Host as H, NAMESPACE as N, setMode as a, bootstrapLazy as b, writeTask as c, doc as d, createEvent as e, readTask as f, getMode as g, h, getElement as i, forceUpdate as j, getAssetPath as k, promiseResolve as p, registerInstance as r, setPlatformHelpers as s, win as w };","map":{"version":3,"sources":["C:/Users/shadow/OneDrive/Portofoliu/TILT/src/frontend/tilt-app/node_modules/@ionic/core/dist/esm/index-b3eecb14.js"],"names":["NAMESPACE","scopeId","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","setPlatformHelpers","helpers","Object","assign","supportsShadow","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","map","flags","name","method","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","$lazyInstance$","$queuedListeners$","consoleError","body","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","host","querySelector","innerHTML","createElement","insertBefore","add","adoptedStyleSheets","includes","attachStyles","$cmpMeta$","$hostElement$","endAttachStyles","$tagName$","shadowRoot","getRootNode","$modeName$","classList","cmp","convertScopedToShadow","css","computeMode","modeResolutionChain","find","m","setMode","getMode","ref","getHostRef","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","isComplexType","o","nodeName","vnodeData","children","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","newVNode","classData","className","class","keys","filter","k","join","vdomFnUtils","vnode","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","Host","isHost","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","slice","isComplex","n","xlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","createTextNode","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","some","nodeToRelocate","vNode","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","previousSibling","getElement","createEvent","emit","detail","emitEvent","bubbles","composed","cancelable","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","then","updateComponent","endUpdate","rc","endRender","callRender","childrenPromises","postUpdate","postUpdateComponent","all","render","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","forceUpdate","isConnected","who","documentElement","namespace","arg","thenFn","initializeClientHydrate","hostId","endHydrate","childRenderNodes","slotNodes","shadowRootNodes","$orgLocNodes$","initializeDocumentHydrate","Map","clientHydrate","orgLocationId","$hostId$","$nodeId$","delete","shadowRootNode","childNodeType","childIdSplt","childVNode","$depth$","$index$","nodeValue","orgLocNodes","parsePropertyValue","propValue","propType","parseFloat","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","setContentReference","hasAttribute","$listeners$","contentRefElm","createComment","firstChild","disconnectedCallback","rmListener","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","delegatesFocus","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","readTask","Build","isDev","isBrowser","isServer","isTesting","B","H","N","a","b","d","f","g","p","s","w"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst NAMESPACE = 'ionic';\n\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = true;\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target = getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (flags & 4 /* TargetDocument */)\n        return doc;\n    if (flags & 8 /* TargetWindow */)\n        return win;\n    if (flags & 16 /* TargetBody */)\n        return doc.body;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n    if (flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        if (vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$key$ = key;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$key$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (memberName === 'key')\n            ;\n        else if (memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            doc.createTextNode('');\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before) );\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ((defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render && instance.render();\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        {\n            safeCall(instance, 'componentDidUpdate');\n        }\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            ;\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (!hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((ancestorComponent.nodeType === 1 /* ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = hostRef.$lazyInstance$ ;\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                                });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: false,\n};\n\nexport { Build as B, Host as H, NAMESPACE as N, setMode as a, bootstrapLazy as b, writeTask as c, doc as d, createEvent as e, readTask as f, getMode as g, h, getElement as i, forceUpdate as j, getAssetPath as k, promiseResolve as p, registerInstance as r, setPlatformHelpers as s, win as w };\n"]},"metadata":{},"sourceType":"module"}